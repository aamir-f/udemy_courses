CQRS : Command Query Responsibility Separation
--> Architecture pattern that goes hand in hand with akka
--> Modern application: Load for reading a data more writing data
    (product search more than product update)
--> Separate Read and Write (faster access of data, localized access of data)

--> We follow ACID(Atomicity, Consistency, Isolation, Durability)
--> All transaction is a collection of instructions. To maintain the integrity of
	databases, all transactions must obey ACID properties.

	ACID(https://www.educative.io/edpresso/what-are-acid-properties-in-a-database?aid=5082902844932096&utm_source=google&utm_medium=cpc&utm_campaign=edpresso-dynamic&gclid=CjwKCAiA_eb-BRB2EiwAGBnXXnaAm0zGmx2d-gMN43B-uRdeRNXyFkaQwt1E07YF4m7kqTzY84wo4BoCjJ8QAvD_BwE)

--> Splitting an application into two parts: Command Side and Query Side (Different services for both)
--> Commands: Affect an entity
--> Queries: Fetch the state of our entities.


--> Advantages:
	Individually tune our Reads and Writes as per load
	Individual Upscaling and Downscaling possible.
	Individual Model our data

--> Disadvantage:
	Added Complexity

--> CQRS is a natural fit for event sourcing  like akka

