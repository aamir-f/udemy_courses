EventSourcing:
 --> Instead of storing current state, we store events. It gives a much richer description about state. i.e for an online store instead of traditional RDBMS storage
 that stores a single record with status as refunded, we can store all the events starting from order to refunded to give us a better description.
 --> Instead of storing the current state, we store events.
 --> We can always recreate the current state by replaying the events.
 Pros:
   -> high performance: event are append only
   -> avoids relational stores and ORM entirely
   -> full trace of every state (through events we can go to any state)
   -> fits the akka actor model perfectly.

Cons:
    -> querying a state is potentially expensive as we have to replay events (will be sorted out with akka persistence query)
    -> potential performance issue with long-lived entities because stream of events can be extremely large. (sort with Snapshotting)
    -> data model subject to changes with time as our application evolves (sort out through schema evolution techniques)

