1.) https://www.quora.com/What-is-the-difference-between-an-Akka-Actor-and-a-Java-Thread

2.) https://blog.knoldus.com/performance-benchmarking-akka-actors-vs-java-threads/

https://www.interviewcake.com/article/java/big-o-notation-time-and-space-complexity

Definition:
Akka is a toolkit and runtime for building highly concurrent, distributed and fault-tolerant message-driven
applications on the JVM...

---> The actor is the fundamental unit of computation embodying processing, storage and communication....
      so inside akka, processing(represented as behaviour), storage (as state)
      so akka is implementation of actor model

-> Each actor has a mailbox and dispatcher, actorRef enqueues in coming messages into mailbox, then
   the dispatcher schedules message processing. Message delivery and processing are two separate activities,
   and most probably happens in different threads.

   --> Grafana for monitoring actors

--> tell passes implicitly sender, also forward passes ActorContext implicitly
--> using Identify(1) on actorSelection and matching ActorIdentity(1, Some(actorRef)) we can get actorRef from it...

--> TestActorRef(synchronous testing), TestProbe() for asynchronous testing

--> Concurrency is about dealing with a lot of things at the same time.
--> Parallelism is about doing a lot of things at the same time.

--> Concurreny is the property of the program, parallel execution is property of machine
--> one coffee machine and two queues(concurrency), two coffee machines and two queues (parallelism)
--> Two or more tasks are considered concurrent, if the order in which they get executed in time is not pre-determined i.e it introduces non-determinism
--> The concept of progressing multiple tasks at the same time is called Multitasking.
-- > When we progress tasks concurrently we say they progress in an asynchronous manner.
     Asynchronous code execution is therefore the way we handle concurrency in programming.

--> Concurrency is about working smarter. Parallelism is a way of throwing more resources at the problem.