==> Cats is a library which provides abstraction for functional programming in scala
==> Cats are written using the modular structure, which allows us to choose which type of class,
    instance, and the interface we want to use
==> Based on 1.) Type Classes, 2.) Implicits

==> Type-Classes (is an api or functionality that we want to implement, parts(type instances, type class uses))
 --> we can package type class instances in roughly four ways:
        by placing them in an object such as JsonWriterInstances;
        by placing them in a trait;
        by placing them in the companion object of the type class;
        by placing them in the companion object of the parameter type.
        With option 1 we bring instances into scope by importing them. With option 2 we bring them into scope with inheritance.
        With options 3 and 4 instances are always in implicit scope, regardless of where we try to use them.

        It is conventional to put type class instances in a companion object (option 3 and 4 above) if there is only one sensible implementation,
        or at least one implementation that is widely accepted as the default. This makes type class instances easier to use as no import is required
        to bring them into the implicit scope.

 --> The implicit scope which roughly consists of:
        local or inherited definitions;
        imported definitions;
        definitions in the companion object of the type class or the parameter type



--> Monads, and related concepts, are the functional programming equivalent
    of object‐oriented design patterns—architectural building blocks that turn up
    over and over again in code. They differ from object‐oriented patterns in two
    main ways:
    • they are formally, and thus precisely, defined; and
    • they are extremely (extremely) general.